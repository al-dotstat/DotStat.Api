// <auto-generated />
using System;
using DotStat.Api.Infrastructure.Persistance;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DotStat.Api.Infrastructure.Migrations
{
    [DbContext(typeof(DotStatApiDbContext))]
    [Migration("20241014183641_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("api")
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("DotStat.Api.Domain.BuildingAggregate.Building", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ComplexId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("ComplexId");

                    b.ToTable("buildings", "api");
                });

            modelBuilder.Entity("DotStat.Api.Domain.CommercialAggregate.Commercial", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AdditionalJsonInfo")
                        .HasColumnType("longtext");

                    b.Property<int>("BuildingId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("CurrentStatus")
                        .HasColumnType("int");

                    b.Property<int>("DeveloperId")
                        .HasColumnType("int");

                    b.Property<string>("DeveloperUnique")
                        .HasColumnType("longtext");

                    b.Property<string>("Layout")
                        .HasColumnType("longtext");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("BuildingId");

                    b.HasIndex("DeveloperId");

                    b.ToTable("commercials", "api");
                });

            modelBuilder.Entity("DotStat.Api.Domain.ComplexAggregate.Complex", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("longtext");

                    b.Property<double?>("Area")
                        .HasColumnType("double");

                    b.Property<DateTime?>("CompletionDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<int>("DistrictId")
                        .HasColumnType("int");

                    b.Property<string>("Latitude")
                        .HasColumnType("longtext");

                    b.Property<string>("Longitude")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("NameRu")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("DistrictId");

                    b.ToTable("complexes", "api");
                });

            modelBuilder.Entity("DotStat.Api.Domain.DeveloperAggregate.Developer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("NameRu")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("developers", "api");
                });

            modelBuilder.Entity("DotStat.Api.Domain.DistrictAggregate.District", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("districts", "api");
                });

            modelBuilder.Entity("DotStat.Api.Domain.FlatAggregate.Flat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AdditionalJsonInfo")
                        .HasColumnType("longtext");

                    b.Property<int>("BuildingId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("CurrentStatus")
                        .HasColumnType("int");

                    b.Property<int>("DeveloperId")
                        .HasColumnType("int");

                    b.Property<string>("DeveloperUnique")
                        .HasColumnType("longtext");

                    b.Property<bool?>("IsEuro")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Layout")
                        .HasColumnType("longtext");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("BuildingId");

                    b.HasIndex("DeveloperId");

                    b.ToTable("flats", "api");
                });

            modelBuilder.Entity("DotStat.Api.Domain.OrderAggregate.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("FileExpiredDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("orders", "api");
                });

            modelBuilder.Entity("DotStat.Api.Domain.ParkingAggregate.Parking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AdditionalJsonInfo")
                        .HasColumnType("longtext");

                    b.Property<int>("BuildingId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("CurrentStatus")
                        .HasColumnType("int");

                    b.Property<int>("DeveloperId")
                        .HasColumnType("int");

                    b.Property<string>("DeveloperUnique")
                        .HasColumnType("longtext");

                    b.Property<string>("Layout")
                        .HasColumnType("longtext");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("BuildingId");

                    b.HasIndex("DeveloperId");

                    b.ToTable("parkings", "api");
                });

            modelBuilder.Entity("DotStat.Api.Domain.ParseAggregate.Parse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("AreCommercialsParsed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("AreFlatsParsed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("AreParkingsParsed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("AreStoragesParsed")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("ComplexId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("ComplexId");

                    b.ToTable("parsings", "api");
                });

            modelBuilder.Entity("DotStat.Api.Domain.StorageAggregate.Storage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AdditionalJsonInfo")
                        .HasColumnType("longtext");

                    b.Property<int>("BuildingId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("CurrentStatus")
                        .HasColumnType("int");

                    b.Property<int>("DeveloperId")
                        .HasColumnType("int");

                    b.Property<string>("DeveloperUnique")
                        .HasColumnType("longtext");

                    b.Property<string>("Layout")
                        .HasColumnType("longtext");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("BuildingId");

                    b.HasIndex("DeveloperId");

                    b.ToTable("storages", "api");
                });

            modelBuilder.Entity("DotStat.Api.Domain.UserAggregate.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("LastName")
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("users", "api");
                });

            modelBuilder.Entity("DotStat.Api.Domain.BuildingAggregate.Building", b =>
                {
                    b.HasOne("DotStat.Api.Domain.ComplexAggregate.Complex", null)
                        .WithMany()
                        .HasForeignKey("ComplexId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DotStat.Api.Domain.CommercialAggregate.Commercial", b =>
                {
                    b.HasOne("DotStat.Api.Domain.BuildingAggregate.Building", null)
                        .WithMany()
                        .HasForeignKey("BuildingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DotStat.Api.Domain.DeveloperAggregate.Developer", null)
                        .WithMany()
                        .HasForeignKey("DeveloperId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("DotStat.Api.Domain.CommercialAggregate.Entities.CommercialDeclaration", "Declaration", b1 =>
                        {
                            b1.Property<int>("Id")
                                .HasColumnType("int")
                                .HasColumnName("DeclarationId");

                            b1.Property<int>("CommercialId")
                                .HasColumnType("int");

                            b1.Property<double>("Area")
                                .HasColumnType("double");

                            b1.Property<DateTime>("CreatedDateTime")
                                .HasColumnType("datetime(6)");

                            b1.Property<string>("Entrance")
                                .IsRequired()
                                .HasColumnType("longtext");

                            b1.Property<string>("Floor")
                                .IsRequired()
                                .HasColumnType("longtext");

                            b1.Property<string>("Number")
                                .IsRequired()
                                .HasColumnType("longtext");

                            b1.Property<string>("Unique")
                                .IsRequired()
                                .HasColumnType("longtext");

                            b1.Property<DateTime>("UpdatedDateTime")
                                .HasColumnType("datetime(6)");

                            b1.HasKey("Id", "CommercialId");

                            b1.HasIndex("CommercialId")
                                .IsUnique();

                            b1.ToTable("commercial_declaration", "api");

                            b1.WithOwner()
                                .HasForeignKey("CommercialId");
                        });

                    b.OwnsMany("DotStat.Api.Domain.CommercialAggregate.Entities.CommercialParsingInfo", "ParsingInfos", b1 =>
                        {
                            b1.Property<int>("Id")
                                .HasColumnType("int")
                                .HasColumnName("CommercialParsingInfoId");

                            b1.Property<int>("CommercialId")
                                .HasColumnType("int");

                            b1.Property<string>("AdditionalJsonInfo")
                                .HasColumnType("longtext");

                            b1.Property<double?>("Area")
                                .HasColumnType("double");

                            b1.Property<string>("Building")
                                .HasColumnType("longtext");

                            b1.Property<DateTime>("CreatedDateTime")
                                .HasColumnType("datetime(6)");

                            b1.Property<DateTime>("Date")
                                .HasColumnType("datetime(6)");

                            b1.Property<string>("Floor")
                                .HasColumnType("longtext");

                            b1.Property<string>("Number")
                                .HasColumnType("longtext");

                            b1.Property<int>("ParseId")
                                .HasColumnType("int");

                            b1.Property<double>("Price")
                                .HasColumnType("double");

                            b1.Property<int>("Status")
                                .HasColumnType("int");

                            b1.Property<DateTime>("UpdatedDateTime")
                                .HasColumnType("datetime(6)");

                            b1.HasKey("Id", "CommercialId");

                            b1.HasIndex("CommercialId");

                            b1.HasIndex("ParseId");

                            b1.ToTable("commercial_parsing_infos", "api");

                            b1.WithOwner()
                                .HasForeignKey("CommercialId");

                            b1.HasOne("DotStat.Api.Domain.ParseAggregate.Parse", null)
                                .WithMany()
                                .HasForeignKey("ParseId")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();
                        });

                    b.Navigation("Declaration");

                    b.Navigation("ParsingInfos");
                });

            modelBuilder.Entity("DotStat.Api.Domain.ComplexAggregate.Complex", b =>
                {
                    b.HasOne("DotStat.Api.Domain.DistrictAggregate.District", null)
                        .WithMany()
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.OwnsMany("DotStat.Api.Domain.ComplexAggregate.ValueObjects.ComplexDeveloper", "Developers", b1 =>
                        {
                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b1.Property<int>("Id"));

                            b1.Property<int>("ComplexId")
                                .HasColumnType("int");

                            b1.Property<int>("DeveloperId")
                                .HasColumnType("int");

                            b1.HasKey("Id", "ComplexId");

                            b1.HasIndex("ComplexId");

                            b1.HasIndex("DeveloperId");

                            b1.ToTable("complex_developers", "api");

                            b1.WithOwner()
                                .HasForeignKey("ComplexId");

                            b1.HasOne("DotStat.Api.Domain.DeveloperAggregate.Developer", null)
                                .WithMany()
                                .HasForeignKey("DeveloperId")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();
                        });

                    b.Navigation("Developers");
                });

            modelBuilder.Entity("DotStat.Api.Domain.FlatAggregate.Flat", b =>
                {
                    b.HasOne("DotStat.Api.Domain.BuildingAggregate.Building", null)
                        .WithMany()
                        .HasForeignKey("BuildingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DotStat.Api.Domain.DeveloperAggregate.Developer", null)
                        .WithMany()
                        .HasForeignKey("DeveloperId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("DotStat.Api.Domain.FlatAggregate.Entities.FlatDeclaration", "Declaration", b1 =>
                        {
                            b1.Property<int>("Id")
                                .HasColumnType("int")
                                .HasColumnName("DeclarationId");

                            b1.Property<int>("FlatId")
                                .HasColumnType("int");

                            b1.Property<double>("Area")
                                .HasColumnType("double");

                            b1.Property<double>("CeilingHeight")
                                .HasColumnType("double");

                            b1.Property<DateTime>("CreatedDateTime")
                                .HasColumnType("datetime(6)");

                            b1.Property<string>("Entrance")
                                .IsRequired()
                                .HasColumnType("longtext");

                            b1.Property<string>("Floor")
                                .IsRequired()
                                .HasColumnType("longtext");

                            b1.Property<double>("LivingArea")
                                .HasColumnType("double");

                            b1.Property<string>("Number")
                                .IsRequired()
                                .HasColumnType("longtext");

                            b1.Property<string>("Roominess")
                                .IsRequired()
                                .HasColumnType("longtext");

                            b1.Property<string>("Unique")
                                .IsRequired()
                                .HasColumnType("longtext");

                            b1.Property<DateTime>("UpdatedDateTime")
                                .HasColumnType("datetime(6)");

                            b1.HasKey("Id", "FlatId");

                            b1.HasIndex("FlatId")
                                .IsUnique();

                            b1.ToTable("flat_declaration", "api");

                            b1.WithOwner()
                                .HasForeignKey("FlatId");
                        });

                    b.OwnsMany("DotStat.Api.Domain.FlatAggregate.Entities.FlatParsingInfo", "ParsingInfos", b1 =>
                        {
                            b1.Property<int>("Id")
                                .HasColumnType("int")
                                .HasColumnName("FlatParsingInfoId");

                            b1.Property<int>("FlatId")
                                .HasColumnType("int");

                            b1.Property<string>("AdditionalJsonInfo")
                                .HasColumnType("longtext");

                            b1.Property<double?>("Area")
                                .HasColumnType("double");

                            b1.Property<string>("Building")
                                .HasColumnType("longtext");

                            b1.Property<DateTime>("CreatedDateTime")
                                .HasColumnType("datetime(6)");

                            b1.Property<DateTime>("Date")
                                .HasColumnType("datetime(6)");

                            b1.Property<string>("Floor")
                                .HasColumnType("longtext");

                            b1.Property<double?>("LivingArea")
                                .HasColumnType("double");

                            b1.Property<string>("Number")
                                .HasColumnType("longtext");

                            b1.Property<int>("ParseId")
                                .HasColumnType("int");

                            b1.Property<double>("Price")
                                .HasColumnType("double");

                            b1.Property<string>("Roominess")
                                .HasColumnType("longtext");

                            b1.Property<int>("Status")
                                .HasColumnType("int");

                            b1.Property<DateTime>("UpdatedDateTime")
                                .HasColumnType("datetime(6)");

                            b1.HasKey("Id", "FlatId");

                            b1.HasIndex("FlatId");

                            b1.HasIndex("ParseId");

                            b1.ToTable("flat_parsing_infos", "api");

                            b1.WithOwner()
                                .HasForeignKey("FlatId");

                            b1.HasOne("DotStat.Api.Domain.ParseAggregate.Parse", null)
                                .WithMany()
                                .HasForeignKey("ParseId")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();
                        });

                    b.Navigation("Declaration");

                    b.Navigation("ParsingInfos");
                });

            modelBuilder.Entity("DotStat.Api.Domain.OrderAggregate.Order", b =>
                {
                    b.HasOne("DotStat.Api.Domain.UserAggregate.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsMany("DotStat.Api.Domain.OrderAggregate.ValueObjects.OrderItem", "OrderItems", b1 =>
                        {
                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b1.Property<int>("Id"));

                            b1.Property<int>("OrderId")
                                .HasColumnType("int");

                            b1.Property<int>("ComplexId")
                                .HasColumnType("int");

                            b1.Property<bool>("IncludeCommercials")
                                .HasColumnType("tinyint(1)");

                            b1.Property<bool>("IncludeFlats")
                                .HasColumnType("tinyint(1)");

                            b1.Property<bool>("IncludeParkings")
                                .HasColumnType("tinyint(1)");

                            b1.Property<bool>("IncludeStorages")
                                .HasColumnType("tinyint(1)");

                            b1.HasKey("Id", "OrderId");

                            b1.HasIndex("ComplexId");

                            b1.HasIndex("OrderId");

                            b1.ToTable("order_items", "api");

                            b1.HasOne("DotStat.Api.Domain.ComplexAggregate.Complex", null)
                                .WithMany()
                                .HasForeignKey("ComplexId")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();

                            b1.WithOwner()
                                .HasForeignKey("OrderId");
                        });

                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("DotStat.Api.Domain.ParkingAggregate.Parking", b =>
                {
                    b.HasOne("DotStat.Api.Domain.BuildingAggregate.Building", null)
                        .WithMany()
                        .HasForeignKey("BuildingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DotStat.Api.Domain.DeveloperAggregate.Developer", null)
                        .WithMany()
                        .HasForeignKey("DeveloperId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("DotStat.Api.Domain.ParkingAggregate.Entities.ParkingDeclaration", "Declaration", b1 =>
                        {
                            b1.Property<int>("Id")
                                .HasColumnType("int")
                                .HasColumnName("DeclarationId");

                            b1.Property<int>("ParkingId")
                                .HasColumnType("int");

                            b1.Property<double>("Area")
                                .HasColumnType("double");

                            b1.Property<DateTime>("CreatedDateTime")
                                .HasColumnType("datetime(6)");

                            b1.Property<string>("Entrance")
                                .IsRequired()
                                .HasColumnType("longtext");

                            b1.Property<string>("Floor")
                                .IsRequired()
                                .HasColumnType("longtext");

                            b1.Property<string>("Number")
                                .IsRequired()
                                .HasColumnType("longtext");

                            b1.Property<string>("Unique")
                                .IsRequired()
                                .HasColumnType("longtext");

                            b1.Property<DateTime>("UpdatedDateTime")
                                .HasColumnType("datetime(6)");

                            b1.HasKey("Id", "ParkingId");

                            b1.HasIndex("ParkingId")
                                .IsUnique();

                            b1.ToTable("parking_declaration", "api");

                            b1.WithOwner()
                                .HasForeignKey("ParkingId");
                        });

                    b.OwnsMany("DotStat.Api.Domain.ParkingAggregate.Entities.ParkingParsingInfo", "ParsingInfos", b1 =>
                        {
                            b1.Property<int>("Id")
                                .HasColumnType("int")
                                .HasColumnName("ParkingParsingInfoId");

                            b1.Property<int>("ParkingId")
                                .HasColumnType("int");

                            b1.Property<string>("AdditionalJsonInfo")
                                .HasColumnType("longtext");

                            b1.Property<double?>("Area")
                                .HasColumnType("double");

                            b1.Property<string>("Building")
                                .HasColumnType("longtext");

                            b1.Property<DateTime>("CreatedDateTime")
                                .HasColumnType("datetime(6)");

                            b1.Property<DateTime>("Date")
                                .HasColumnType("datetime(6)");

                            b1.Property<string>("Floor")
                                .HasColumnType("longtext");

                            b1.Property<string>("Number")
                                .HasColumnType("longtext");

                            b1.Property<int>("ParseId")
                                .HasColumnType("int");

                            b1.Property<double>("Price")
                                .HasColumnType("double");

                            b1.Property<int>("Status")
                                .HasColumnType("int");

                            b1.Property<DateTime>("UpdatedDateTime")
                                .HasColumnType("datetime(6)");

                            b1.HasKey("Id", "ParkingId");

                            b1.HasIndex("ParkingId");

                            b1.HasIndex("ParseId");

                            b1.ToTable("parking_parsing_infos", "api");

                            b1.WithOwner()
                                .HasForeignKey("ParkingId");

                            b1.HasOne("DotStat.Api.Domain.ParseAggregate.Parse", null)
                                .WithMany()
                                .HasForeignKey("ParseId")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();
                        });

                    b.Navigation("Declaration");

                    b.Navigation("ParsingInfos");
                });

            modelBuilder.Entity("DotStat.Api.Domain.ParseAggregate.Parse", b =>
                {
                    b.HasOne("DotStat.Api.Domain.ComplexAggregate.Complex", null)
                        .WithMany()
                        .HasForeignKey("ComplexId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DotStat.Api.Domain.StorageAggregate.Storage", b =>
                {
                    b.HasOne("DotStat.Api.Domain.BuildingAggregate.Building", null)
                        .WithMany()
                        .HasForeignKey("BuildingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DotStat.Api.Domain.DeveloperAggregate.Developer", null)
                        .WithMany()
                        .HasForeignKey("DeveloperId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("DotStat.Api.Domain.StorageAggregate.Entities.StorageDeclaration", "Declaration", b1 =>
                        {
                            b1.Property<int>("Id")
                                .HasColumnType("int")
                                .HasColumnName("DeclarationId");

                            b1.Property<int>("StorageId")
                                .HasColumnType("int");

                            b1.Property<double>("Area")
                                .HasColumnType("double");

                            b1.Property<DateTime>("CreatedDateTime")
                                .HasColumnType("datetime(6)");

                            b1.Property<string>("Entrance")
                                .IsRequired()
                                .HasColumnType("longtext");

                            b1.Property<string>("Floor")
                                .IsRequired()
                                .HasColumnType("longtext");

                            b1.Property<string>("Number")
                                .IsRequired()
                                .HasColumnType("longtext");

                            b1.Property<string>("Unique")
                                .IsRequired()
                                .HasColumnType("longtext");

                            b1.Property<DateTime>("UpdatedDateTime")
                                .HasColumnType("datetime(6)");

                            b1.HasKey("Id", "StorageId");

                            b1.HasIndex("StorageId")
                                .IsUnique();

                            b1.ToTable("storage_declaration", "api");

                            b1.WithOwner()
                                .HasForeignKey("StorageId");
                        });

                    b.OwnsMany("DotStat.Api.Domain.StorageAggregate.Entities.StorageParsingInfo", "ParsingInfos", b1 =>
                        {
                            b1.Property<int>("Id")
                                .HasColumnType("int")
                                .HasColumnName("StorageParsingInfoId");

                            b1.Property<int>("StorageId")
                                .HasColumnType("int");

                            b1.Property<string>("AdditionalJsonInfo")
                                .HasColumnType("longtext");

                            b1.Property<double?>("Area")
                                .HasColumnType("double");

                            b1.Property<string>("Building")
                                .HasColumnType("longtext");

                            b1.Property<DateTime>("CreatedDateTime")
                                .HasColumnType("datetime(6)");

                            b1.Property<DateTime>("Date")
                                .HasColumnType("datetime(6)");

                            b1.Property<string>("Floor")
                                .HasColumnType("longtext");

                            b1.Property<string>("Number")
                                .HasColumnType("longtext");

                            b1.Property<int>("ParseId")
                                .HasColumnType("int");

                            b1.Property<double>("Price")
                                .HasColumnType("double");

                            b1.Property<int>("Status")
                                .HasColumnType("int");

                            b1.Property<DateTime>("UpdatedDateTime")
                                .HasColumnType("datetime(6)");

                            b1.HasKey("Id", "StorageId");

                            b1.HasIndex("ParseId");

                            b1.HasIndex("StorageId");

                            b1.ToTable("storage_parsing_infos", "api");

                            b1.HasOne("DotStat.Api.Domain.ParseAggregate.Parse", null)
                                .WithMany()
                                .HasForeignKey("ParseId")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();

                            b1.WithOwner()
                                .HasForeignKey("StorageId");
                        });

                    b.Navigation("Declaration");

                    b.Navigation("ParsingInfos");
                });

            modelBuilder.Entity("DotStat.Api.Domain.UserAggregate.User", b =>
                {
                    b.OwnsMany("DotStat.Api.Domain.UserAggregate.Entities.RefreshToken", "RefreshTokens", b1 =>
                        {
                            b1.Property<string>("Id")
                                .HasColumnType("varchar(255)")
                                .HasColumnName("RefreshTokenId");

                            b1.Property<int>("UserId")
                                .HasColumnType("int");

                            b1.Property<string>("Device")
                                .HasColumnType("longtext");

                            b1.Property<DateTime>("ExpiredDateTime")
                                .HasColumnType("datetime(6)");

                            b1.Property<string>("Ip")
                                .HasColumnType("longtext");

                            b1.HasKey("Id", "UserId");

                            b1.HasIndex("UserId");

                            b1.ToTable("refresh_tokens", "api");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.OwnsMany("DotStat.Api.Domain.UserAggregate.Entities.UserClaim", "Claims", b1 =>
                        {
                            b1.Property<int>("Id")
                                .HasColumnType("int")
                                .HasColumnName("UserClaimId");

                            b1.Property<int>("UserId")
                                .HasColumnType("int");

                            b1.Property<string>("Type")
                                .IsRequired()
                                .HasColumnType("longtext");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("longtext");

                            b1.HasKey("Id", "UserId");

                            b1.HasIndex("UserId");

                            b1.ToTable("user_claims", "api");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.OwnsMany("DotStat.Api.Domain.UserAggregate.Entities.UserRole", "Roles", b1 =>
                        {
                            b1.Property<int>("Id")
                                .HasColumnType("int")
                                .HasColumnName("UserRoleId");

                            b1.Property<int>("UserId")
                                .HasColumnType("int");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("longtext");

                            b1.Property<string>("NormalizedName")
                                .IsRequired()
                                .HasColumnType("longtext");

                            b1.HasKey("Id", "UserId");

                            b1.HasIndex("UserId");

                            b1.ToTable("user_roles", "api");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.Navigation("Claims");

                    b.Navigation("RefreshTokens");

                    b.Navigation("Roles");
                });
#pragma warning restore 612, 618
        }
    }
}
